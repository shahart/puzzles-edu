package edu.generalpuzzle.main;

import edu.generalpuzzle.infra.engines.EngineStrategy;
import edu.generalpuzzle.infra.GraphIt;

import javax.swing.*;
import javax.swing.event.HyperlinkListener;
import javax.swing.event.HyperlinkEvent;
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.net.URL;
import java.text.MessageFormat;
import java.util.Locale;
import java.util.ResourceBundle;

final class JMain extends JFrame {

    private final String resourceLocation = "edu/generalpuzzle/resources/";

    private static String args = "";
    final ResourceBundle resourceBundle = ResourceBundle.getBundle(resourceLocation + "i18n", Locale.US);

    private final JButton saveButton;
    private final JButton loadButton;
    private TrayIcon trayIcon;
    private final JButton graphItButton;
    private final JCheckBox traceButton;
    private final JTextField headerLabel;
    private JTextArea[] statusLabel;
    private JProgressBar progressBar;
    private JLabel progressBarLabel;
    private final JCheckBox showAllCheckBox;
    private final JCheckBox inPauseCheckBox;
    private final JEditorPane aboutLink;
    private int pauseState;
    private Timer timerUpdateUI;
    private Timer timerAutoSave;
    private Timer timerLog;
    JTextArea tx;
    JFrame j;
    private boolean saveSupported;
    private Icon image = null;

    private ActionEventHandler handler;

    private boolean done = false;
    private int graphItSolutionNumber = 0;

    private final Main main;

    public static void main(final String arguments[]) {

//        SwingUtilities.invokeLater(
//                        new Runnable() {
//                            public void run() {
                                JMain frame = new JMain();
                                frame.execute(arguments);
//                            }
//                        });
        
    }

    public JMain() throws HeadlessException {
//        super(resourceBundle.getString("puzzles"));

        super("puzzles 1.0.0");
        setResizable(true); // due to linux

        addWindowListener(new WindowListener(){
                    public void windowOpened(WindowEvent e){}
                    public void windowClosing(WindowEvent e){}
                    public void windowClosed(WindowEvent e){}
                    public void windowIconified(WindowEvent e){
                        setVisible(false);
                        displayTrayIcon();
                    }
                    public void windowDeiconified(WindowEvent e){}
                    public void windowActivated(WindowEvent e){}
                    public void windowDeactivated(WindowEvent e){}
            });


        main = new Main();
        main.buildCases();
        main.readINI(false);

        saveSupported = (EngineStrategy.get_ENGINE_TYPE() == EngineStrategy.ENGINE_TYPE_ITERATIVE) && (main.getEnginesAmount() == 1);

        handler = new ActionEventHandler();

        Container container = getContentPane();
        container.setLayout(new FlowLayout());

        setVisible(true);
        headerLabel = new JTextField(13);
        headerLabel.setEditable(false);
        headerLabel.setText(MessageFormat.format(resourceBundle.getString("main.args"), args));

        headerLabel.setEditable(false);
        headerLabel.setText(MessageFormat.format(resourceBundle.getString("main.args"), args));
        container.add(headerLabel);

        aboutLink = new JEditorPane("text/html", "<a href='file://doc/gpz03faw.pdf'>about</a>");
        aboutLink.setEditable(false);
        aboutLink.setBackground(headerLabel.getBackground());
        aboutLink.addHyperlinkListener(new MyHyperlinkListener());
        container.add(aboutLink);

        loadButton = new JButton(! saveSupported ? resourceBundle.getString("load.disabled") : resourceBundle.getString("load.status"));
        loadButton.setEnabled(false);
//        container.add(loadButton);

        showAllCheckBox = new JCheckBox(resourceBundle.getString("show.all"));
        showAllCheckBox.setSelected(EngineStrategy.INITIAL_SHOW_ALL_COPIES && ! EngineStrategy.GENERATE_BY_ALL);
        showAllCheckBox.setEnabled(! EngineStrategy.GENERATE_BY_ALL);
        showAllCheckBox.addActionListener(handler);
        container.add(showAllCheckBox);

        inPauseCheckBox = new JCheckBox(resourceBundle.getString("pause"));
        inPauseCheckBox.addActionListener(handler);
        inPauseCheckBox.setEnabled(false);
        container.add(inPauseCheckBox);

        JCheckBox generateAllState=new JCheckBox(resourceBundle.getString("generate.by.all"), EngineStrategy.GENERATE_BY_ALL);
        generateAllState.setEnabled(false);
        generateAllState.setToolTipText("Generated by all - no unique part in use");
        container.add(generateAllState);

        graphItButton = new JButton(resourceBundle.getString("graph.it"));
        graphItButton.addActionListener(handler);
        graphItButton.setEnabled(false);
        graphItButton.setToolTipText("next solution in X3D format");
        container.add(graphItButton);

        traceButton = new JCheckBox(("Trace"));
        traceButton.addActionListener(handler);
        traceButton.setEnabled(   EngineStrategy.get_ENGINE_TYPE() != EngineStrategy.DL_SPLITS);
        traceButton.setToolTipText(EngineStrategy.get_ENGINE_TYPE() == EngineStrategy.DL_SPLITS ? "limitation: no meaning in DL" : "trace in console");
        container.add(traceButton);

        saveButton = new JButton(resourceBundle.getString("save"));
        saveButton.addActionListener(handler);
        saveButton.setEnabled((EngineStrategy.get_ENGINE_TYPE() == EngineStrategy.ENGINE_TYPE_ITERATIVE) && saveSupported);
        if (EngineStrategy.get_ENGINE_TYPE() != EngineStrategy.ENGINE_TYPE_ITERATIVE)
            saveButton.setToolTipText("limitation: no save as recursive 'hides' the stack, and Dlx is quite fast"); // limitation. TODO
        container.add(saveButton);

        URL url = ClassLoader.getSystemResource(resourceLocation + "background.png");
         image = null;
         try {
             if (url != null) {
                 image = new ImageIcon(url);
                 setIconImage(((ImageIcon)image).getImage());
             }
         }
         catch (Exception e) {
         }


        statusLabel = new JTextArea[main.getEnginesAmount()];
        for (int i=0; i<statusLabel.length; i++) {
            statusLabel[i] = new JTextArea(6, 50);
            statusLabel[i].setEditable(false);
            container.add(statusLabel[i]);
        }
        statusLabel[0].setText("\n\n waiting for user input...");

        setSize(700,200); //240*3,410 + 40 * statusLabel.length);

//        lastSolution = new JLabel(EngineStrategy.get_ENGINE_TYPE() == EngineStrategy.ENGINE_TYPE_DLX ? "Last checked solution... " : "Current status...");

        JMenuBar menuBar = new JMenuBar();
//        setJMenuBar(menuBar);
        JMenu aboutMenu = new JMenu("Help");
        menuBar.add(aboutMenu);
        JMenuItem aboutMenuItem=new JMenuItem("about");
        aboutMenu.add(aboutMenuItem);
        aboutMenuItem.addActionListener(handler);

    }

    public String showOptions() {
        JOptionPane pane = new JOptionPane("available puzzles");
        pane.setSelectionValues(main.cases.split("\n"));
        pane.setMessageType(JOptionPane.QUESTION_MESSAGE);
        JDialog dialog = pane.createDialog(this, ""); //available puzzles");
        dialog.setVisible(true);
        return (String)pane.getInputValue();
    }

    public void userInputs() {

        String myArgs = "";

        myArgs = showOptions();

        if (myArgs == JOptionPane.UNINITIALIZED_VALUE) {
            System.out.println("error: cancelled");
            System.exit(0);
        }

        headerLabel.setText("Arguments: " + myArgs);

        String s = ""; 
        try { BufferedReader f = new BufferedReader(new FileReader("config/" + myArgs + "_parts.bsh"));s = f.readLine();}
        catch (Exception e) {}

        if (s.startsWith("// usage"))

            try {
                myArgs += " " + JOptionPane.showInputDialog(this, s.substring("// usage ".length()).split("\n")[0], "extra arguments",
                    JOptionPane.QUESTION_MESSAGE).trim();

            }
            catch (Exception e) {
                System.out.println("error: cancelled");
                System.exit(0);
            }

            if (myArgs.equals("")) {
                System.out.println("error: cancelled");
                System.exit(0);
            }

        args = myArgs;

        headerLabel.setText(args); // "Arguments: " + args);
        String loadButtonText = ! saveSupported ? "Load disabled" : "Not loaded";

        if (saveSupported)
        try {
            File file = new File(Main.FILE_NAME + "_" + args + ".bin");
            FileInputStream fis = new FileInputStream(file);
            if (JOptionPane.showConfirmDialog(this, "Load? " + args , "puzzles - previous run was found",
                    JOptionPane.YES_NO_OPTION) == JOptionPane.NO_OPTION) {
                fis.close();
                // delete the file that Main reads
                // boolean deleted =
                file.delete();
                file = new File(Main.FILE_NAME + ".bin");
                // deleted =
                file.delete();
            }
            else {
                loadButtonText = "Loaded";
                fis.close();
                if (! file.renameTo(new File(Main.FILE_NAME + ".bin")))
                    System.out.println("error: _bin already exists");
            }
        }
        catch (IOException e) {
        }

        loadButton.setText(loadButtonText);

        System.out.println("\nsave supported: " + saveSupported + "\n");

        timerUpdateUI = new Timer(1000, null);
        timerUpdateUI.setInitialDelay(2000); // 1.5 seconds to complete the init phases
        timerUpdateUI.addActionListener(new TimerUpdateUIListener());
        timerUpdateUI.start();

        addWindowListener( // setDefaultCloseOperation(EXIT_ON_CLOSE);
                new WindowAdapter() {
                    public void windowClosing(WindowEvent event) {
                        // TODO- current state
                        try {
                            File file = new File(Main.FILE_NAME);
                            file.renameTo(new File(Main.FILE_NAME + "_" + args + ".bin"));
                        }
                        catch (Exception e) {
                        }
//                        if (main.getRatio(0) < 1) {
//                            System.out.println("\nNOT FINISHED");
                            System.out.println("\nEXITING, this can take a while..");
                        if (GraphIt.process != null)
                            GraphIt.process.destroy();
//                        }

                        System.exit(0);
                    }
                }
            );

    }

    public final class TimerLogUpdateUIListener implements ActionListener {
//        private int[] seconds;// = new int[ statusLabel.length];

        private String prev = "";

        public void actionPerformed(ActionEvent event) {

            String curr = Tee.getInstance().getWindow();
            if (curr.compareTo(prev) != 0) {
                tx.setText(curr);
                j.setTitle("truncated console.log - line " + Tee.getInstance().getWindowSize());

            }
            prev= curr;

        }
    }


    public void execute(String arguments[]) {

//        if ( ! Tee.INSIDE_IDE) {
//            if ((arguments.length == 0 || ! arguments[arguments.length-1].equalsIgnoreCase(Tee.DEBUG_CODE)) && System.console() == null) { // can't work with pipe tee, use my own Tee
                setVisible(true);
//                JOptionPane.showMessageDialog(this, "no console output, follow the console.log file", "warning", JOptionPane.INFORMATION_MESSAGE);

                // TODO
                timerLog = new Timer(1000, null);
                timerLog.setInitialDelay(1000); // 1.5 seconds to complete the init phases
                timerLog.addActionListener(new TimerLogUpdateUIListener());
                timerLog.start();
                tx = new JTextArea(20,50);
                tx.setEditable(false);
                j =new JFrame("truncated console.log");
                j.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
                j.getContentPane().add(new JScrollPane(tx), BorderLayout.CENTER);
                j.setVisible(true);
                j.pack();


               // System.exit(0);
//            }
//        }

        Tee.getInstance();

        if (arguments.length > 0)
            saveSupported = false;


        userInputs();

        System.out.println("args " + args + "\n");
        String args[] = JMain.args.trim().split("\\s+");

        if (main.getEnginesAmount() == 1) { 
            int rangeLoc = 0;
            if (arguments.length > 0) {
                if (arguments[arguments.length-1].equalsIgnoreCase(Tee.DEBUG_CODE))
                    rangeLoc ++;
                if (arguments.length == 1 + rangeLoc)
                    main.engineSetRange(Integer.parseInt(arguments[rangeLoc]), Integer.MAX_VALUE);
                else if (arguments.length == 2 + rangeLoc)
                    main.engineSetRange(Integer.parseInt(arguments[rangeLoc]), Integer.parseInt(arguments[rangeLoc+1]));
            }
        }

        statusLabel[0].setText("\n\n initializing...");

        if (saveSupported) {
            timerAutoSave = new Timer(1000, null);
            timerAutoSave.setInitialDelay(60 * 1000); // every minute
            timerAutoSave.addActionListener(new TimerAutoSaveListener());
            timerAutoSave.start();
        }

        try {
            String s = main.go(args);
            if (s != null)
                JOptionPane.showMessageDialog(this, s);
        }
        catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.toString(), "Error - check console", JOptionPane.ERROR_MESSAGE); //.getMessage());
            statusLabel[0].setText("\n\n check console");
            e.printStackTrace();
        }

        if (trayIcon != null)
            trayIcon.displayMessage("DONE",
                "unique solutions: " + Long.toString(main.getSum()) + " - total time: " + Long.toString(main.getTime()),
                TrayIcon.MessageType.INFO);

        if (statusLabel[0].getText().equals("\n\n initializing...")) {
            statusLabel[0].setText("\nDONE");
        }
        System.out.println("\n\nDONE");
        saveButton.setEnabled(false);
        showAllCheckBox.setEnabled(false);
        inPauseCheckBox.setEnabled(false);
        graphItButton.setEnabled(false);
        traceButton.setEnabled(false);
        done = true;

    }

    private class MyHyperlinkListener implements HyperlinkListener {
        public void hyperlinkUpdate(HyperlinkEvent evt) {
            if (evt.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
                if (evt.getSource() == aboutLink)
                    if (Desktop.isDesktopSupported()) {
                        Desktop desktop = Desktop.getDesktop();
                        if (desktop.isSupported(Desktop.Action.OPEN))
                            try {
								// Runtime.getRuntime().exec("doc/SumatraPDF.exe doc/gpz03faw.pdf"); //
                                desktop.open(new File("doc/faw10.pdf"));
							}
                            catch (Exception e) { 
//								desktop.open(new File("about.txt"));
//				                JOptionPane.showMessageDialog(this, "probably no PDF reader. " + e.getMessage(), "about- error", JOptionPane.INFORMATION_MESSAGE);
								System.out.println("probably no PDF reader. " + e.getMessage());
							}
                    }
            }
        }
    }

    private class ActionEventHandler implements ActionListener {
        public void actionPerformed(ActionEvent event) {
            if (event.getSource() == saveButton) {
                EngineStrategy.save();
                saveButton.setText("State saved");
                System.out.print("\nSAVED\n");
            }
            else
            if (event.getSource() == graphItButton) {
                EngineStrategy.set_GRAPH_FOR_ALL(false);
                EngineStrategy.set_AUTO_GRAPH_IT(false);
                graphItButton.setEnabled(false);
                graphItSolutionNumber = EngineStrategy.getLastSolutionNumber();
                EngineStrategy.graphIt();
                System.out.println("\nGraphIt - waiting.."); // TODO disable when engine 0 done
            }
            else if (event.getSource() == traceButton) {
                EngineStrategy.setTrace(traceButton.isSelected());
            }
            else if (event.getActionCommand().equals("about"))
                JOptionPane.showMessageDialog(getParent().getParent(), "1.0.0");
            else if (event.getSource() == showAllCheckBox)
                EngineStrategy.toggleShowAll();
            else if (event.getSource() == inPauseCheckBox) {
                pause();
            }
            }
        }


    private void pause() {
        pauseState = EngineStrategy.setPause();
        inPauseCheckBox.setText("Pause");
        if (pauseState > 0 && pauseState ==  statusLabel.length+1) {
            ;
//                    for (int i=0; i< pauseState-1; i++)
//                        if (! main.isAlive(i)) {
//                            EngineStrategy.setPause();
//                            break;
//                        }
        }
        else if (pauseState > 0) {
            inPauseCheckBox.setText("Pause" + pauseState);
            while (pauseState < statusLabel.length+1 && ! main.isAlive(pauseState-1)) {
                pauseState = EngineStrategy.setPause();
                inPauseCheckBox.setText("Pause" + pauseState);
                if (pauseState == statusLabel.length+1) {
                    pauseState = EngineStrategy.setPause();
                    inPauseCheckBox.setText("Pause");
                    break;
                }
            }
        }
        inPauseCheckBox.setSelected(pauseState != 0);
    }
 

    public final class TimerAutoSaveListener implements ActionListener {
        public void actionPerformed(ActionEvent event) {
            EngineStrategy.save();
            saveButton.setText("State saved");
        }
    }

    public final class TimerUpdateUIListener implements ActionListener {
//        private int[] seconds;// = new int[ statusLabel.length];

        public void actionPerformed(ActionEvent event) {

            if (statusLabel.length == 1) {
                getContentPane().remove(statusLabel[0]);
                statusLabel = new JTextArea[main.getEnginesAmount()];
//                seconds = new int[ statusLabel.length];
                for (int i=0; i<statusLabel.length; i++) {
                    statusLabel[i] = new JTextArea(6, 18);
                    statusLabel[i].setEditable(false);
                    getContentPane().add(statusLabel[i]);
                }
                progressBar = new JProgressBar(0,1000); // promil
                progressBar.setToolTipText("% 0");
                getContentPane().add(progressBar);

                getContentPane().add(new JLabel("", image, SwingConstants.CENTER));

                progressBarLabel = new JLabel();
                getContentPane().add(progressBarLabel);


                setSize(700,670);
            }

            repaint();

            if (! statusLabel[0].getText().equals("\n\n initializing...")) 
                inPauseCheckBox.setEnabled(true);

            double totalPct = 0;
            for (int i=0; i<statusLabel.length; i++) {
//                if (main.isAlive(i) && pauseState != i+1 && pauseState != statusLabel.length+1)
//                    /*main.getTime();*/seconds[i]++;
                totalPct += main.getRatio(i);
                String pct = Integer.toString((int)(100*main.getRatio(i)));
                try {
//                    if (main.isAlive(i))
                    switch(main.getEngineId(i)) {
                        case 0: statusLabel[i].setForeground(Color.BLACK); break;
                        case 1: statusLabel[i].setForeground(Color.BLUE); break;
                        case 2: statusLabel[i].setForeground(Color.GREEN); break;
                        case 3: statusLabel[i].setForeground(Color.RED); break;
                        case 4: statusLabel[i].setForeground(Color.MAGENTA); break;
                        default: statusLabel[i].setForeground(Color.GRAY); break;
                    }
                    statusLabel[i].setText(main.getStatus(i) + " - % " + pct
                        + " - " + (main.getRatio(i) <= 0 ? "?" : (int)((main.getTime(i)/main.getRatio(i)-main.getTime(i)) )/* /main.getEnginesAmount() */ ) + " left");
//                    if (statusLabel[i].getText().startsWith("DONE")) {
//                        seconds[i]--;
//                    }
                }
                catch (NullPointerException e) { // init not finished -> no engines for now
                }
            }

            if (trayIcon != null) {
                trayIcon.setToolTip( (! EngineStrategy.GENERATE_BY_ALL ? "unique" : "") + " solutions: " + Long.toString(main.getSum()) + " - total time: " + Long.toString(main.getTime()) + " - % " + (int) (100 * totalPct / statusLabel.length));
            }

//            totalPct /=/ statusLabel.length;
            progressBar.setValue((int)(progressBar.getMaximum() * totalPct / statusLabel.length));
            progressBar.setToolTipText(" % " + (int) (100 * totalPct / statusLabel.length));
            progressBarLabel.setText((! EngineStrategy.GENERATE_BY_ALL ? "unique" : "") + " solutions: " + Long.toString(main.getSum()) + " - total time: " + Long.toString(main.getTime()) + " - " + progressBar.getToolTipText());

            if (done) {
                timerUpdateUI.stop();
                if (timerAutoSave != null) timerAutoSave.stop();
                inPauseCheckBox.setEnabled(false);
                if (trayIcon != null) {
                    trayIcon.getPopupMenu().getItem(0).setEnabled(false);
                    String s = "DONE\n\n" +
                             (! EngineStrategy.GENERATE_BY_ALL ? "unique" : "") + " solutions: " + Long.toString(main.getSum()) + " - total time: " + Long.toString(main.getTime());
                    trayIcon.setToolTip(s);
                }

            }
            else if (EngineStrategy.getLastSolutionNumber() > graphItSolutionNumber)
                graphItButton.setEnabled(true);
        }
    }

    public void displayTrayIcon(){
        if (SystemTray.isSupported()) {
            final SystemTray tray = SystemTray.getSystemTray();

            MouseListener mouseListener = new MouseListener() {
                public void mouseClicked(MouseEvent e) {}
                public void mouseEntered(MouseEvent e) {}
                public void mouseExited(MouseEvent e) {}
                public void mousePressed(MouseEvent e) {
                    if (e.getButton() == MouseEvent.BUTTON1) {
                        tray.remove(tray.getTrayIcons()[0]);
                        setVisible(true);
                        setExtendedState(Frame.NORMAL);
                    }
                }
                public void mouseReleased(MouseEvent e) {}
            };

            ActionListener pauseListener = new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    pause();
                    trayIcon.getPopupMenu().getItem(0).setLabel((inPauseCheckBox.isSelected() ? "v " : "") + inPauseCheckBox.getText());
                }
            };
            PopupMenu popup = new PopupMenu();
            MenuItem defaultItem = new MenuItem((inPauseCheckBox.isSelected() ? "v " : "") + inPauseCheckBox.getText());
            defaultItem.addActionListener(pauseListener);
            popup.add(defaultItem);
            trayIcon = new TrayIcon(getIconImage(),  (! EngineStrategy.GENERATE_BY_ALL ? "unique" : "") + " solutions: " + Long.toString(main.getSum()) + " - total time: " + Long.toString(main.getTime()), popup);
//            ActionListener actionListener = new ActionListener() {
//                public void actionPerformed(ActionEvent e) {
//                    trayIcon.displayMessage("DONE",
//                        main.getStatus(0).split("\n")[2] + "\n" + main.getStatus(0).split("\n")[3],
//                        TrayIcon.MessageType.INFO);
//                }
//            };

            if (done) {
                trayIcon.getPopupMenu().getItem(0).setEnabled(false);
                String s = "DONE\n\n" +
                        (! EngineStrategy.GENERATE_BY_ALL ? "unique" : "") + " solutions: " + Long.toString(main.getSum()) + " - total time: " + Long.toString(main.getTime());
                trayIcon.setToolTip(s);
            }


            trayIcon.setImageAutoSize(true);
//            trayIcon.addActionListener(actionListener);
            trayIcon.addMouseListener(mouseListener);

            try {
                tray.add(trayIcon);
            } catch (AWTException e) {
                System.err.println("TrayIcon could not be added.");
            }
        } else {
            System.err.println("System tray is currently not supported.");
        }
    }

}

